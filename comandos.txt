git  init = iniciar repositorio git en la carpeta actual
git status = ver el estado del repositorio. ******Es recomendable usarlo antes de cada cambio.********
git add nombre_archivo = agregar archivo al staging, está en memoria pero no confirmado
git add . = lo mismo que el anterior, pero agrega todos los archivos de la carpeta actual
git commit -m "comentario" = confirma los cambios que están en staging y les deja ese comentario
git commit = abre el editor de linux "bi" y se debe agregar un comentario en la primera linea y luego se confirman los cambios con ESC + SHIFT + Z Z (dos veces Z)
git commit -am "comentario" = realiza el git add y git commit al mismo tiempo y coloca el comentario.
git log = muestra los metadatos de los commit que se han hecho.
git log nombre_archivo = lo mismo que el anterior pero de un archivo
git log --stat = muestra un resumen de todos los cambios
git show nombre_archivo = muestra los cambios del archivo anterior y el nuevo
git diff id_commit1 id_commit2 = muestra las diferencias de 2 veriones de un mismo archivo (los id_commit aparecen con el comando git log nombre_archivo)
git diff = muestra las diferencias de staging con lo que está confirmado en disco
git reset id_commit --hard = deja el repositorio como se encontraba en la versión del id_commit
git checkout id_commit nombre_archivo = me deja seleccionado el archivo nombre_archivo en la versión que escogí en el id_commit. Es decir es para saltar entre versiones
git checkout master nombre_archivo = me deja el archivo con la última versión realizada
git reset --soft = Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard = Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset --mixed = Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset HEAD = El comando git reset saca archivos del área de staging sin borrarlos ni realizar otras acciones. Esto impide que los últimos cambios en estos archivos se envíen al último commit. Podemos incluirlos de nuevo en staging con git add si cambiamos de opinión.
git push = Mandar cambios a un servidor remoto.
git branch = muestra las ramas creadas y donde está actualmente.
git merge nombre_branch = realiza la fusión de 2 ramas. en las 2 ramas deben estar todos los cambios en commit, de lo contrarrio se perderán los cambios.
git branch nombre_branch = sirve para crear una nueva rama.
-------crear llave pública y privada ------
Estando en el home es decir en "CD" debe estar git config --global user.email "guillermof.barrerao@gmail.com" y luego
se escribe lo siguiente "ssh-keygen -t rsa -b 4096 -C "guillermof.barrerao@gmail.com" y luego pedirá donde guardarla y una contraseña y ya. Luego se verifica que el servicio esté corriendo con "eval $(ssh-agent -s) y aparecerá un número, después vamos a colocar el siguiente comando para agregar nuestra llave privada a nuestro ordenador con "ssh-add ~/.ssh/id_rsa" luego de esto se agrega la llave a git
--------------------------------------------
git branch -m main = renombrar la rama master por main.
git remote add origin ruta_ssh_de_github = esto sirve para conectar la el repositorio remoto a nuestro entorno local con el nombre origin.
git remote -v = para ver las conexiones remotas.
git push origin main = sirve para colocar lo que está en main en el origen (repositorio remoto), pero primero se debe hacer un fetch o pull
git pull origin main = para traer el repositorio creado en github a la rama main de nuestro entorno local.
git pull origin main --allow-unrelated-histories = permite hacer lo anterior forzando a mezclar las historias de los repositorios.