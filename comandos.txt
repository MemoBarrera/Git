git  init = iniciar repositorio git en la carpeta actual
git status = ver el estado del repositorio. ******Es recomendable usarlo antes de cada cambio.********
git add nombre_archivo = agregar archivo al staging, está en memoria pero no confirmado
git add . = lo mismo que el anterior, pero agrega todos los archivos de la carpeta actual
git commit -m "comentario" = confirma los cambios que están en staging y les deja ese comentario
git commit = abre el editor de linux "bi" y se debe agregar un comentario en la primera linea y luego se confirman los cambios con ESC + SHIFT + Z Z (dos veces Z)
git commit -am "comentario" = realiza el git add y git commit al mismo tiempo y coloca el comentario.
git log = muestra los metadatos de los commit que se han hecho.
git log nombre_archivo = lo mismo que el anterior pero de un archivo
git log --stat = muestra un resumen de todos los cambios
git show nombre_archivo = muestra los cambios del archivo anterior y el nuevo
git diff id_commit1 id_commit2 = muestra las diferencias de 2 veriones de un mismo archivo (los id_commit aparecen con el comando git log nombre_archivo)
git diff = muestra las diferencias de staging con lo que está confirmado en disco
git reset id_commit --hard = deja el repositorio como se encontraba en la versión del id_commit
git checkout id_commit nombre_archivo = me deja seleccionado el archivo nombre_archivo en la versión que escogí en el id_commit. Es decir es para saltar entre versiones
git checkout master nombre_archivo = me deja el archivo con la última versión realizada
git reset --soft = Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard = Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset --mixed = Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset HEAD = El comando git reset saca archivos del área de staging sin borrarlos ni realizar otras acciones. Esto impide que los últimos cambios en estos archivos se envíen al último commit. Podemos incluirlos de nuevo en staging con git add si cambiamos de opinión.
git push = Mandar cambios a un servidor remoto.
git branch = muestra las ramas creadas y donde está actualmente.
git merge nombre_branch = realiza la fusión de 2 ramas. en las 2 ramas deben estar todos los cambios en commit, de lo contrarrio se perderán los cambios.
git branch nombre_branch = sirve para crear una nueva rama.
-------crear llave pública y privada ------
Estando en el home es decir en "CD" debe estar git config --global user.email "guillermof.barrerao@gmail.com" y luego
se escribe lo siguiente "ssh-keygen -t rsa -b 4096 -C "guillermof.barrerao@gmail.com" y luego pedirá donde guardarla y una contraseña y ya. Luego se verifica que el servicio esté corriendo con "eval $(ssh-agent -s) y aparecerá un número, después vamos a colocar el siguiente comando para agregar nuestra llave privada a nuestro ordenador con "ssh-add ~/.ssh/id_rsa" luego de esto se agrega la llave a git
--------------------------------------------
git branch -m main = renombrar la rama master por main.
git remote add origin ruta_ssh_de_github = esto sirve para conectar la el repositorio remoto a nuestro entorno local con el nombre origin.
git remote -v = para ver las conexiones remotas.
git push origin nombre_rama = sirve para colocar lo que está en la rama nombre_rama en el origen (repositorio remoto), pero primero se debe hacer un fetch o pull
git pull origin nombre_rama = para traer el repositorio creado en github a la rama nombre_rama de nuestro entorno local.
git pull origin main --allow-unrelated-histories = permite hacer lo anterior forzando a mezclar las historias de los repositorios.
Desde github puedo ver toda la historia y puedo hacer los cambios que quiera y hacer de nuevo un git pull para traer los cambios al local.
git log --all --graph --decorate --oneline = este comando sirve para visualizar la trazabilidad de todos los commits más fácilmente, con los branch que se han creado.
git tag -a v0.1 -m "Primera versión" id_commit = Esto es para definir la primera versión completa de un proyecto.
git tag = muestra todos los tags realizados.
git show-ref --tags = muestra los tags con sus id_commit.
------Nota----
Una buena práctica antes de hacer un push es hacer un pull, ya que si se realizaron cambios en Internet se traen primero al local y luego ahí si se realiza el push para que todo esté igual.
--------------
git push origin --tags = este comando manda los tags creados a github.
git tag -d nombre_tag = Esto es para borrar tags en local.
git push origin :refs/tags/nombre_tag = Esto es para actualizar el borrado del tag nombre_tag en Internet.
-----Clonar repositorio-----
Para clonar el repositorio es necesario crear una carpeta nueva vacía y adentro de esta carpeta ejecutar el comando
git clone ruta_ssh_de_github = este comando permite clonar un proyecto desde github la ruta_ssh_de_github hace referencia a la ruta del proyecto.
------copias en github----
Para hacer copias de proyectos y poder colaborar sin necesidad de ser colaborador en github, se debe realizar un FORK del proyecto que se quiere, esto va a traer todo el proyecto a nuestro repositorio,
luego se debe clonar el proyecto de nuestro repositorio y para mantenerlo actualizado se crea un "git remote add origin ruta_ssh_de_github" del proyecto original y realizar "git pull" para traer los cambios
más recientes y luego hacer un "git push" a nuestro repositorio para que estén sincronizados y si se quiere colaborar se realizan los cambios, s suben a nuestro repositorio y luego se hace
un pull request al dueño del proyecto original con el fin de que haga la revisión y acepte o rechace los cambios.
------ignorar archivos en git-------
Para ignorar archivos que no queremos que suban a nuestro repositorio se debe crear un archivo llamado ".gitignore" allí se colocaran los nombres o extensiones de archivos que se van a ignorar 
ej. (*.jpg - todos los archivos que estén en ese proyecto y que sean de formato jpg).
------README.md----------
Para editar el README.md es bueno guiarse por los proyectos Open Source como laravel y para editar se puede en la página https://pandao.github.io/editor.md/en.html
------GITHUB Pages-------
Se puede simular un dominio para un proyecto con GITHUB Pages, se revisa la configuración y ya se ingresa a username.github.io (teniendo en cuenta que username es de cada quien).
git rebase nombre_rama = este comando sirve para unir toda la historia de una rama a donde estoy parado, ESTO ES UNA MALA PRÁCTICA, y si se utiliza debe ser en local, no debe subir al remoto,
lo primero que se hace es crear una branch, pasarse a esa branch, hacer los cambios y commits respectivos, cuando esté listo se debe hacer un "git rebase main" para unir la historia del main a la branch
y es como si se hubiera acabado de crear la branch, luego se debe pasar a la rama main y se debe hacer el rebase a la rama creada y luego se borra la rama que creamos para hacer los cambios y listo
se hace de cuenta que no pasó nada y que los cambios se hicieron en el main. ESTO ES UNA MALA PRÁCTICA.
----esta linea se hace con la branch main.
------esta linea se hizo en la branch exp
git stash = este comando ayuda a guardar los cambios que no se les ha hecho git add y así poder moverme entre ramas sin tener que hacer commit, es decir que guarda los cambios en una sección especial. Adicional a esto también vuelve a la versión de último commit hecho.
git stash pop = este comando se debe realizar en la rama donde se hizo el git stash ya que si se hace en otro lugar puede generar inconvenientes. Este comando libera el stash y vuelve los cambios como estaban si guardar.
git stash branch nombre_rama = esta se hace despues de git stash y sirve para guardar los cambios nuevos en una nueva rama
git stash drop = borra los tash que estén en git stash list.
git stash list = muestra los stash en memoria.
git clean --dry-run = muestra los archivos que se van a eliminar, si por error se crearon archivos basura, este comando me ayuda a previsualizar los archivos que se van a borrar.
git clean -f = fuerza el borrado de los archivos que se previsualizaron con el comando git clean --dry-run, excluyendo los que estén en .gitignore
git cherry-pick id_commit = este comando sirve para hacer un merge con un commit específico de otra rama, ESTO ES UNA MALA PRÁCTICA, por lo general la forma correcta de hacer esto es con git checkout al commit que quiero fusionar y luego hacer un git merge donde se requiera y volver al git checkout último commit. ESTO ES UNA MALA PRÁCTICA.
git reflog = muestra un git log pero completo.
gitk = abre un programa propio de git que muestra los logs mas bonitos.
git commit --amend =  se utiliza cuando se realiza un commit y se olvida agregar algo que debía ir en ese commit, es decir agrega los últimos cambios relizados al commit anterior sin crear uno nuevo. Pero primero se debe hacer un git add nombre_archivo para que esto funcione.
git grep palabra_a_buscar = este comando sirve para filtrar en todos los archivos la palabra palabra_a_buscar y me aparecerá. si es una etiqueta html se debe hacer entre comillas dobles.
git grep -n palabra_a_buscar = esto me devuelve la linea donde está esta palabra_a_buscar.
git grep -c palabra_a_buscar = esta me cuenta las veces que aparece esa palabra_a_buscar en cada archivo.
git log -S palabra_a_buscar = esto hace lo mismo que el grep pero lo hace en los detalles de los commits.
git shortlog = me muestra todos los commit por usuario.
git shortlog -sn = la cuenta de los commits por usuario.
git shortlog -sn --all --no-merges = esto me muestra la cuenta de todos los commits por usuario incluidos los eliminados y excluidos los hechos con merge.
-------configuración de comandos---------
Los comandos se pueden configurar creando alias, ejemplo
git config --global alias.stats "shortlog -sn --all --no-merges" (Aquí estoy renombrando el comando que está entre comillas por stats), ahora puedo ejecutar en mi consola GIT STATS y me va a hacer lo mismo que git shortlog -sn --all --no-merges.
git blame nombre_archivo = este comando ayuda a ver linea por liena quién realizó el cambio.
git blame nombre_archivo -L1,10 = hace lo mismo que el comando anterior pero en el rango de lineas 1 a la 10.
git branch -r = ver las ramas del repositorio remoto.
git branch -a = ver todas las ramas.